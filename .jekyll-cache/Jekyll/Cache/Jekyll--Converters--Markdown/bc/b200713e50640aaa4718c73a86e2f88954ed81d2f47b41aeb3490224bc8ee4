I"î<h1 id="making-a-pull-request">Making a Pull Request</h1>

<p>A Pull Request (PR) merges the changes in a branch of a repository
to the main branch. This means the main branch has all of the updates
that need to get approved before they‚Äôre implemented.
For the basics on how to create a PR, GitHub has a guide available
<a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request">here</a>.</p>

<p>Most of the pull requests done in the ARFC group are from a feature branch 
(not the main branch)
in a personal fork to the main branch in the ARFC fork of a repository. 
PRs made in the ARFC organization should:</p>

<ul>
  <li>Have GitHub Labels (Difficulty:1-Beginner, Status:1-New, etc.)</li>
  <li>Have a GitHub Project (Meta, Fuel Cycles, etc.)</li>
  <li>Have a description in GitHub</li>
  <li>List requested reviews (usually one or two, consider if more than
two is really necessary for your request)</li>
  <li>Link to an issue</li>
  <li>Be small (achieve one thing; ‚Äúatomic‚Äù)</li>
</ul>

<h1 id="reviewing-a-pull-request">Reviewing a Pull Request</h1>

<p><a href="https://fuelcycle.org/kernel/pr_review.html">Cyclus PR Review Recommendations</a></p>

<p><a href="https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/">Common mistakes and errors</a></p>

<p>Below is a checklist the PR reviewer should
consider before approving a pull request. As a reminder, the
<a href="http://arfc.github.io/manual/coc">ARFC Code of Conduct</a> still applies
in pull request reviews. Reviews should be both thorough and
respectful.</p>

<p>If you are about to review a PR, consider copying and pasting
this checklist into your review comment and checking the boxes
as you go along.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">-</span> [ ] Read the PR description
<span class="p">-</span> [ ] Read through all the changes, considering the following questions.
<span class="p">  -</span> [ ] Is there anything you can praise about this PR? Start with
        praise.
<span class="p">  -</span> [ ] Are variable names brief but descriptive?
<span class="p">  -</span> [ ] Are new/changed functions no longer than a paragraph?
<span class="p">  -</span> [ ] Do all function parameters have default values where appropriate?
<span class="p">  -</span> [ ] Is the code clear and clean? (see Robert C. Martin's
        <span class="p">[</span><span class="nv">Clean Code</span><span class="p">](</span><span class="sx">https://i-share-uiu.primo.exlibrisgroup.com/discovery/fulldisplay?docid=alma99944155312205899&amp;context=L&amp;vid=01CARLI_UIU:CARLI_UIU&amp;tab=LibraryCatalog&amp;lang=en</span><span class="p">)</span>)
<span class="p">  -</span> [ ] Is there enough documentation?
<span class="p">  -</span> [ ] Does the programming style meet the requirements of the
        repository (<span class="p">[</span><span class="nv">PEP8</span><span class="p">](</span><span class="sx">https://www.python.org/dev/peps/pep-0008/</span><span class="p">)</span> for python,
        <span class="p">[</span><span class="nv">google C++ style guide</span><span class="p">](</span><span class="sx">https://google.github.io/styleguide/cppguide.html</span><span class="p">)</span>, etc.)
<span class="p">  -</span> [ ] If a new feature has been added, or a bug fixed, has a test been
        added to confirm good behavior?
<span class="p">  -</span> [ ] Does the test actually test the new/changed functionality?
<span class="p">  -</span> [ ] Does the test successfully test edge cases?
<span class="p">  -</span> [ ] Does the test successfully test corner cases?
<span class="p">  -</span> [ ] If the repository has continuous integration: does the PR pass
        the tests?
<span class="p">  -</span> [ ] If there is no continuous integration, check out the branch
        locally, build, and run the tests.
<span class="p">  -</span> [ ] Do the tests pass on your machine?
<span class="p">  -</span> [ ] Is the PR free of random cruft (built files, <span class="sb">`.swp`</span> files,
        etc.)?
<span class="p">  -</span> [ ] Do all files in the PR belong in the repository?
<span class="p">  -</span> [ ] If the PR deletes files, is this appropriate?
<span class="p">  -</span> [ ] If the PR adds files or data, are these new files compatible
        with the repository license?
<span class="p">  -</span> [ ] Make a review, leaving kind comments and suggesting changes
        where needed (to resolve the above).
<span class="p">  -</span> [ ] Has the author resolved all of the comments and suggestions
        in your review?
<span class="p">-</span> [ ] When you approve of the PR, merge and close it.
<span class="p">-</span> [ ] Does this PR close an issue? If so, be sure to descriptively
      close this issue when the PR is merged
<span class="p">-</span> [ ] Thank the author for their contribution.
</code></pre></div></div>

<h1 id="responding-to-pull-request-reviews">Responding to Pull Request Reviews</h1>

<p>Reviews on pull requests include comments, approvals, and
suggestions for changes. Comments can include general comments on the
technical substance, documentation, performance, clarity, reproducibility, 
coding style, and even the formatting of the submission. Changes can be
requested for a specific line or lines, where the reviewer can even write
their own code to improve the committed files. These changes can
either be discussed in the comment box or committed directly from the
review with the <code class="highlighter-rouge">commit suggestion</code> button. With this button, the
suggested changes are committed and pushed immediately
to the PR branch, which makes
incorporating suggested changes faster. Do not leave comments un-handled.
All reviewer comments should be incorporated, responded to, handled, or 
discussed further. Once the PR has been approved
by at least one reviewer, a reviewer will merge the changes and the PR will
be closed.</p>
:ET